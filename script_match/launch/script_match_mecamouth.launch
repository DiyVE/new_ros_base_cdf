<launch>
    <!-- <node name="sick_tim_5xx" pkg="sick_scan" type="sick_tim_5xx" output="log" respawn="false"
          respawn_delay="0">
        <param name="hostname" type="string" value="169.254.157.14"/>
        <param name="port" type="string" value="2112"/>
    </node> -->
    <arg name="hostname" default="169.254.157.14"/>
    <arg name="port" default="2112"/>

    <!-- <param name="hostname" type="string" value="169.254.157.14"/> -->
    <!-- <param name="port" type="string" value="2112"/> -->
    <node name="sick_lms_5xx" pkg="sick_scan" type="sick_generic_caller" respawn="false" output="log" respawn_delay="0">
        <!--<param name="robot_description" command="$(find xacro)/xacro.py '$(find sick_scan)/urdf/example.urdf.xacro'" />-->

        <!-- default values: -->
        <!--
          <param name="min_ang" type="double" value="-1.658062789" />
          <param name="max_ang" type="double" value="1.658062789" />
          <param name="intensity" type="bool" value="True" />
          <param name="skip" type="int" value="0" />
          <param name="frame_id" type="str" value="laser" />
          <param name="time_offset" type="double" value="-0.001" />
          <param name="publish_datagram" type="bool" value="False" />
          <param name="subscribe_datagram" type="bool" value="false" />
          <param name="device_number" type="int" value="0" />
          <param name="range_min" type="double" value="0.05" />
        -->

        <param name="frame_id" type="str" value="cloud"/>
        <param name="scanner_type" type="string" value="sick_lms_5xx"/>
        <!-- -95° -->
        <param name="min_ang" type="double" value="-1.658062789"/>
        <!-- 95° -->
        <param name="max_ang" type="double" value="1.658062789"/>
        <param name="range_max" type="double" value="100.0"/>
        <param name="intensity" type="bool" value="true"/>
        <param name="intensity_resolution_16bit" type="bool" value="false"/>
        <param name="hostname" type="string" value="$(arg hostname)"/>
        <param name="port" type="string" value="2112"/>
        <param name="timelimit" type="int" value="5"/>
        <param name="use_binary_protocol" type="bool" value="true"/>
        <!-- possible angular resolutions are 1,0.6667,0.5,0.3333,0.25,0.1667
         possible scan frequencies are 25,35,50,75,100 Hz
         Make sure to check in the manual whether the desired scanning frequency
         and angular resolution combination is available.
         The parameters scan_freq and ang_res must always be used together.
        <param name="ang_res" type="double" value="0.1667" />
        <param name="scan_freq" type="double" value="25" />
         -->
        <param name="start_services" type="bool" value="True"/> <!-- start ros service for cola commands -->
        <param name="activate_lferec" type="bool" value="True"/> <!-- activate field monitoring by lferec messages -->
        <param name="activate_lidoutputstate" type="bool" value="True"/> <!-- activate field monitoring by lidoutputstate messages -->
        <param name="activate_lidinputstate" type="bool" value="True"/> <!-- activate field monitoring by lidinputstate messages -->
        <param name="min_intensity" type="double" value="0.0"/> <!-- Set range of LaserScan messages to infinity, if intensity < min_intensity (default: 0) -->

    </node>
    <node pkg="lidar_utils" type="detect_obstacle" name="detect_obstacle" respawn="true" respawn_delay="0">
    </node>
    <node name="robot_state_reciever" pkg="robot_state_reciever" type="robot_state_reciever.py">
        <param name="serial_baudrate" value="115200"/>
        <param name="pic_msg_freq" value="9"/>
        <param name="action_topic" value="/action_orders"/>
        <param name="robot_state_topic" value="/robot_state"/>
    </node>
    <node name="sender" pkg="sender" type="sender_node.py">
        <param name="serial_baudrate" value="115200"/>
        <param name="action_topic" value="/action_orders"/>
        <param name="versionPic_topic" value="/init/version_PIC"/>
    </node>
    <node name="match_handler" pkg="script_match" type="match_handler.py" respawn="true"
          respawn_delay="0.5">
        <param name="action_topic" value="/action_orders"/>
        <param name="script_name" value="mecamouth"/>
    </node>
</launch>